/*!
    \defgroup qf3plugins Plugins
    \ingroup quickfit3

    \defgroup qf3rawdataplugins Raw Data Record Plugins
    \ingroup qf3plugins

    \defgroup qf3evaluationplugins Evaluation Plugins
    \ingroup qf3plugins
*/

/*! \page plugins Writing Plugins
    \ingroup qf3plugins

    QuickFit 3 is in itself not a fitting application (as the name may suggest), but more or less just a
    data manager. It is based on a very simple and versatile data model:
      -# All data is organized in projects (QFProject) and at every time one project is loaded
         in QuickFit. A project is saved in a XML file which describes the object inside the project.
         Usually it does not contain the raw data (although saving data to the project is possible).
      -# There are only few basic types of objects in a project:
         - a raw data record (QFRawDataRecord) which represents any type of data. There is no interface
           to the data that you HAVE to use, so a raw data record may represent any data type (an image,
           a dataseries, a curve, single values, a table, an image series, ...). There are only some basic
           properties for each data object implemented, that are general enough to be used by any object:
           a name, a description, a list of files (which you do not have to use) and a set of properties
           (<key, value> pairs). There is also an API to store evaluation results in this raw data record.
         - data evaluations (QFEvaluationItem) which work on one or more data objects from the list of
           raw data records. The results may either be saved in the evaluation, or written back to the
           raw data record.
         .
       -# QuickFit provieds a library that bundles all classes needed to write plugins. This library is
          documented in \link qf3lib QuickFIt Library \endlink. All plugins have to link to this library
          in order to work properly together with QuickFit.
       -# QuickFit defines a range of specialized interfaces that QFRawDataRecord classes may wish to implement.
          They are not necessary, but if you implement them, you can give your QFRawDataRecord descendent a
          generic interface which some more general evaluations may access. Note that evaluations will have
          to find out by RTTI which interfaces are implemented. All these interfaces are also registered with
          the <a href="">QT Interface system</a>, so you can use the QT tools for RTTI. Of course you may also
          add you own interfaces, but then you will have to make sure that they are available and known to the
          evaluations working on them.

    .

    QuickFit is implemented in a way, that you may add new datatypes and evaluations as plugins. It uses
    the <a href="http://doc.qt.nokia.com/4.6/plugins-howto.html">Qt plugin lower-level API</a>. You will
    find more details about implementing plugins here:
      - \link pluginsrdr Writing QFRawDataRecord Plugins\endlink
      - \link pluginseval Writing QFEvaluationItem Plugins\endlink
    .
*/

/*! \page pluginsrdr Writing QFRawDataRecord Plugins
    \ingroup qf3plugins

    When implementing a new type of raw data record, you will have to follow these steps:
      - create a new Qt plugin project
      - implement a descendent of QFRawDataRecord which implements the desired features. This
        also includes implementing an editor for the data class!
      - implement a plugin class, derived from QFPluginRawDataRecordBase which describes
        the plugin (name, ID, ...) and provides methods that allow to register hooks used to create
        new objects (menu entries ...). Export this class in the plugin.
    .

    QuickFit 3 provides a menu that allows to add new data objects. The plugin class provides
    a register method that allows to add new entries/submenus to this menu. When doing so, you
    can hook those entries to methods in the plugin class that load data files, ...
*/


/*! \page pluginseval Writing QFEvaluationItem Plugins
    \ingroup qf3plugins

*/
