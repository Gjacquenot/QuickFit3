/*!
    \defgroup qf3plugins Plugins
    \ingroup quickfit3

    \defgroup qf3rawdataplugins Raw Data Record Plugins
    \ingroup qf3plugins

    \defgroup qf3evaluationplugins Evaluation Plugins
    \ingroup qf3plugins

    \defgroup qf3fitalgplugins Fitting Algorithm Plugins
    \ingroup qf3plugins

    \defgroup qf3fitfunplugins Fitting Function Plugins
    \ingroup qf3plugins

   \defgroup qf3importerplugins Data Importer Plugins
    \ingroup qf3plugins
	
    \defgroup qf3extensionplugins QuickFit Extension Plugins
    \ingroup qf3plugins

    \defgroup qf3plugintools Plugin programming Tools
    \ingroup qf3plugins

*/

/*! \page plugins Writing Plugins
    \ingroup qf3plugins

    QuickFit 3 is in itself not a fitting application (as the name may suggest), but more or less just a
    data manager (see \link qf3app QuickFit Application \endlink ). The datatypes managed by QuickFit together
    with a variety of other features (like fit algorithms and functions, as well as data evaluations) are
    implemented by plugins.

    QuickFit uses the <a href="http://doc.qt.nokia.com/4.6/plugins-howto.html">Qt plugin lower-level API</a>
    to implement the different extensions, mentioned above. You will find more details about implementing plugins
    here:
      - \subpage pluginsrdr
      - \subpage pluginseval
      - \subpage pluginsfitalg
      - \subpage pluginsfitfunc
      - \subpage pluginsextensions
        - \subpage pluginsextensionscamera
        - \subpage pluginsextensionslinearstage
	  .
    .

    When writing/deploying your plugins also have a lokk at \ref qf3whereiswhat.
*/

/*! \page pluginsrdr Writing QFRawDataRecord Plugins

    When implementing a new type of raw data record, you will have to follow these steps:
      - create a new Qt plugin project
      - implement a descendent of QFRawDataRecord which implements the desired features. This
        also includes implementing an editor for the data class!
      - implement a plugin class, derived from QFPluginRawDataRecordBase which describes
        the plugin (name, ID, ...) and provides methods that allow to register hooks used to create
        new objects (menu entries ...). Export this class in the plugin.
    .

    QuickFit 3 provides a menu that allows to add new data objects. The plugin class provides
    a register method that allows to add new entries/submenus to this menu. When doing so, you
    can hook those entries to methods in the plugin class that load data files, ...
*/


/*! \page pluginseval Writing QFEvaluationItem Plugins


    When implementing a new type of evaluation, you will have to follow these steps:
      - create a new Qt plugin project
      - implement a descendent of QFEvaluationItem which implements the parameter storage for the
        evaluation. Also the logic of the evaluation may be implemented here. You should only store
        the global parameters here, as evaluation results that apply to only single files may be stored
        using the \c results*() functions of QFRawDataRecord together with the raw data.
      - implement a plugin class, derived from QFPluginEvaluationItemBase which describes
        the plugin (name, ID, ...) and provides methods that allow to register hooks used to create
        new objects (menu entries ...). Export this class in the plugin.
    .

    QuickFit 3 provides a menu that allows to add new data objects. The plugin class provides
    a register method that allows to add new entries/submenus to this menu. When doing so, you
    can hook those entries to methods in the plugin class that load data files, ...

*/

/*! \page pluginsfitalg Writing Fit Algorithm Plugins


    Fit Algorithm plugins are somewhat simpler than \link pluginseval evaluation plugins \endlink and
    \link pluginsrdr raw data plugins \endlink . They consist only of one (or more) QFFitAlgorithm
    descendents which implements the fit algorithm as an optimization problem
      \f[ \vec{p}^\ast=\min\limits_{\vec{p}}\|\vec{f}(\vec{p})\| \f]
    in a single function QFFitAlgorithm::intFit(). In addition some  plugin description  methdos, like
    QFFitAlgorithm::name(), QFFitAlgorithm::id(), ... are implemented.

    For a detailed description of the possibilities of implementation, see the QFFitAlgorithm documentation.

    The Qt Plugin is implemented using the interface QFPluginFitAlgorithm. It is possible to implement
    different fitting algorithms in one plugin. Then you have to implement each algorithm in a separate
    QFFitAlgorithm plugin and return in QFPluginFitAlgorithm::getIDs() an ID for every algorithm. The method
    QFPluginFitAlgorithm::get() then returns an instance of the QFFitAlgorithm for a given id.

*/

/*! \page pluginsfitfunc Writing Fit Function Plugins

    This class of plugins are fit functions designed to work together with QFFitAlgorithm fit routines.

    Fit Functions plugins are somewhat simpler than \link pluginseval evaluation plugins \endlink and
    \link pluginsrdr raw data plugins \endlink . They consist only of one (or more) QFFitFunction
    descendents which implements the fit function, possibly together with an implementation of analytical
    derivatives of the fucntion. In addition some plugin description  methdos, like QFFitFunction::name(),
    QFFitFunction::id(), ... are implemented.

    For a detailed description of the possibilities of implementation, see the QFFitFunction documentation.

    The Qt Plugin is implemented using the interface QFPluginFitFunction. It is possible to implement
    different fitting algorithms in one plugin. Then you have to implement each function in a separate
    QFFitFunction plugin and return in QFPluginFitFunction::getIDs() an ID for every function. The method
    QFPluginFitFunction::get() then returns an instance of the QFFitAlgorithm for a given id.

*/

/*! \page pluginsextensions Writing QFExtension Plugins

    These plugins allow to write a wide variety of extensions to QuickFit 3. They are NOT used as part of the
    project tree, but extend the application directly. You may use them to use QuickFit as basis for Experiment
    control systems. As QFExtension plugins are informed about the current project, you my use them to alter the
    project or store data in it.

    If you want to write such plugins, you simply have to implement the interface QFExtension. Better derive your
    plugin from QFExtensionBase, as this already implements some functionality.

    Of each extension QuickFit creates one instance which is stored internally. After loading the plugin the instance
    is initialized using QFExtension::init() (if you want to react to it overload QFExtensionBase::initExtension() ).
    When the plugin is unloaded QFExtension::deinit() is called. You may use QFExtension::init() to register the
    extension to menus and toolbars (using QFExtensionServices). In addition the plugin is informed about every
    change of the current project (QFProject). In that case QuickFit calls QFExtension::setProject() (when reacting
    to this, overload QFExtensionBase::projectChanged(), or simply access QFExtensionBase::project).

    After QFExtension::init() has been called you my access the QFExtensionServices at every time, using
    QFExtensionBase::services. This may also be used to interface all other QFExtension s, currently loaded.

*/

/*! \page pluginsextensionscamera Writing QFExtensionCamera Plugins

    This is	a special QFExtension plugin which also implements the QFExtensionCamera interface. Thus it allows to access
	a camera or any other imaging device in the system. In addition to the methods in QFExtension you will also have to
	implement the methods from QFExtensionCamera.

	If you want to implement such a plugin, just copy the files from the directory \c plugin_template_projects/QFExtensionCamera/
	into a new directory and fill in the functions. In addition you should rename some of the files/classes:
	  - rename the directory to \c \<PLUGIN_NAME\> and the project name to \c \<PLUGIN_NAME\>.pro where \c \<PLUGIN_NAME\> is
	    a name you selected for the plugin.
	  - in 	\c \<PLUGIN_NAME\>.pro, change the \c TARGET to \c \<PLUGIN_NAME\>
      - the plugin ID will be automatically set to be \c "cam_\<PLUGIN_NAME\>" using the TARGETNAME macro defined in the .pro file!
	  - \b optionally you may rename the \c .cpp and \c .h	file and also the plugin class to a new name.
	.

	Here are the files of the template project:

	In \c plugin_template_projects/QFExtensionCamera/qfextensioncamera.pro you will have to set the \c TARGET to a new name
	which will the also be the name of the plugin shared library. Also change the name of the translations to something unique! 
	Here is the tamplate:
	\include plugin_template_projects/QFExtensionCamera/qfextensioncamera.pro

	In the Resource file you should give an icon for your plugin. To do so, rename qfextensioncamera_logo.png to a plugin-specific
	name and also return this filename in \c plugin_template_projects/QFExtensionCamera/qfextensioncamera.h in the \c getIconFilename()
	function:
	\include plugin_template_projects/QFExtensionCamera/qfextensioncamera.qrc

	Here you will have to set the plugin-description. Especially in getID() you will have to care to give a unique name which is not used
	by any other plugin (the currently used IDs may be seen in the Plugin Info dialog of QuickFit (which is situated in the Help menu).
	\include plugin_template_projects/QFExtensionCamera/qfextensioncamera.h

	Implement your plugin here:
	\include plugin_template_projects/QFExtensionCamera/qfextensioncamera.cpp

	If you are a DKFZ internal developer, you may add your plugin to the \c quickitf3.pro by inserting these lines:
	\code
SUBDIRS += plg_<PLUGIN_NAME>
plg_<PLUGIN_NAME>.subdir=./plugins/<PLUGIN_NAME>
plg_<PLUGIN_NAME>.depends = lib
	\endcode
	now calling \code qmake && make \endcode will also build your new plugin.
*/





/*! \page pluginsextensionslinearstage Writing QFExtensionLinearStage Plugins

    This is	a special QFExtension plugin which also implements the QFExtensionLinearStage interface. Thus it allows to access
	computer controlled motion stages, as they are used in many experiments. In addition to the methods in QFExtension you will
	also have to implement the methods from QFExtensionLinearStage.

	If you want to implement such a plugin, just copy the files from the directory \c plugin_template_projects/QFExtensionLinearStage/
	into a new directory and fill in the functions. In addition you should rename some of the files/classes:
	  - rename the directory to \c \<PLUGIN_NAME\> and the project name to \c \<PLUGIN_NAME\>.pro where \c \<PLUGIN_NAME\> is
	    a name you selected for the plugin.
	  - in 	\c \<PLUGIN_NAME\>.pro, change the \c TARGET to \c \<PLUGIN_NAME\>
      - the plugin ID will be automatically set to be \c "cam_\<PLUGIN_NAME\>" using the TARGETNAME macro defined in the .pro file!
	  - \b optionally you may rename the \c .cpp and \c .h	file and also the plugin class to a new name.
	.

	Here are the files of the template project:

	In \c plugin_template_projects/QFExtensionLinearStage/qfextensionlinearstage.pro you will have to set the \c TARGET to a new name
	which will the also be the name of the plugin shared library. Also change the name of the translations to something unique! 
	Here is the tamplate:
	\include plugin_template_projects/QFExtensionLinearStage/qfextensionlinearstage.pro

	In the Resource file you should give an icon for your plugin. To do so, rename qfextensionlinearstage.png to a plugin-specific
	name and also return this filename in \c plugin_template_projects/QFExtensionLinearStage/qfextensionlinearstage.h in the \c getIconFilename()
	function:
	\include plugin_template_projects/QFExtensionLinearStage/qfextensionlinearstage.qrc

	Here you will have to set the plugin-description. Especially in getID() you will have to care to give a unique name which is not used
	by any other plugin (the currently used IDs may be seen in the Plugin Info dialog of QuickFit (which is situated in the Help menu).
	\include plugin_template_projects/QFExtensionLinearStage/qfextensionlinearstage.h

	Implement your plugin here:
	\include plugin_template_projects/QFExtensionLinearStage/qfextensionlinearstage.cpp

	If you are a DKFZ internal developer, you may add your plugin to the \c quickitf3.pro by inserting these lines:
	\code
SUBDIRS += plg_<PLUGIN_NAME>
plg_<PLUGIN_NAME>.subdir=./plugins/<PLUGIN_NAME>
plg_<PLUGIN_NAME>.depends = lib
	\endcode
	now calling \code qmake && make \endcode will also build your new plugin.
*/




