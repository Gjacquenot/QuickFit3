
/*!
    \defgroup qf3app QuickFit Application
    \ingroup quickfit3

    QuickFit 3 is in itself not a fitting application (as the name may suggest), but more or less just a
    data manager. It is based on a very simple and versatile data model:
    <ol>
      <li> All data is organized in projects (QFProject) and at every time one project is loaded
         in QuickFit. A project is saved in a XML file which describes the object inside the project.
         Usually it does not contain the raw data (although saving data to the project is possible).
      <li> There are only few basic types of objects in a project:
         <ul>
         <li> a raw data record (QFRawDataRecord) which represents any type of data. There is no interface
           to the data that you HAVE to use, so a raw data record may represent any data type (an image,
           a dataseries, a curve, single values, a table, an image series, ...). There are only some basic
           properties for each data object implemented, that are general enough to be used by any object:
           a name, a description, a list of files (which you do not have to use) and a set of properties
           (<key, value> pairs). There is also an API to store evaluation results in this raw data record.
         <li> data evaluations (QFEvaluationItem) which work on one or more data objects from the list of
           raw data records. The results may either be saved in the evaluation, or written back to the
           raw data record.
         </ul>
       <li> QuickFit provieds a library that bundles all classes needed to write plugins. This library is
          documented in \link qf3lib QuickFIt Library \endlink. All plugins have to link to this library
          in order to work properly together with QuickFit.
       <li> QuickFit defines a range of specialized interfaces that QFRawDataRecord classes may wish to implement.
          They are not necessary, but if you implement them, you can give your QFRawDataRecord descendent a
          generic interface which some more general evaluations may access. Note that evaluations will have
          to find out by RTTI which interfaces are implemented. All these interfaces are also registered with
          the <a href="http://doc.qt.nokia.com/4.6/plugins-howto.html">QT Interface system</a>, so you can use
		  the QT tools for RTTI. Of course you may also add you own interfaces, but then you will have to make
		  sure that they are available and known to the evaluations working on them.
    </ol>

    In addition QuickFit implements additional possibilities to also use it in a more versatile sense (like e.g.
    as basis for instrument control applications, where the measurement results are directly stored in a QuickFit
    project. To do so, a very basic plugin interface is provided that allows to extend QuickFit with plugins that
    do not implement a special functionality (like e.g. raw data records or evaluations), but that mainly only may
    provide buttons or menu entries in the main application that amy be bound to any type of function.

    For details of plugin programming see the section \link plugins "Writing Plugins" \endlink

*/
