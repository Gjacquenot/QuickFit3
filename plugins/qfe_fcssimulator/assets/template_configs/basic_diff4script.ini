##################################################################
# simulation setup
##################################################################
# random number generator for simulation
simulation.rng=taus2
# duration of the simulation in seconds
simulation.duration=0.01
# simulation timestep in seconds
simulation.timestep=1e-6
# prefix for all output files tosystempathseparator() converts \ and / to your locally valid filename separator
simulation.basename=tosystempathseparator(".\diffusion4_test\")

##################################################################
# setup all brownian objects ("supergroup")
##################################################################
# spherical volume with 5 micrometer radius
brownian.volume_shape=sphere 
brownian.sim_radius=5
# if not specified differently, 2nM fluorophores in the sim-box
brownian.c_fluor=2
# fluorophore is al488
brownian.init_fluorophor=atto488
# no rotational diffusion
brownian.use_rotational_diffusion=false
# specify if, for how many steps and with which resolution to save MSDs
brownian.save_msd_every_n_timesteps=10
brownian.msd_size=1000
# number of independent fluorophores on each walker
brownian.n_fluorophores=1


##################################################################
# setup all fcs objects ("supergroup")
##################################################################
# resolution of the "FCS-data acquisition", i.e. 2*simulation.timestep to accumulate two trajectory timesteps
fcs.corr_taumin=simulation.timestep*2
# setup correlator
fcs.correlator_type=0
fcs.corr_S=20           # number of linear correlators
fcs.corr_m=2            # overlap of two subsequent correlators -> Dt[i+1]=corr_m*Dt[i]
fcs.corr_P=16           # bins per linear correlator
# laser-power for illumination (at peak position in focus)
fcs.P0=150  # laser power in microWatt on circle with r=2*psf_r0
# wavelength of excitation light
fcs.lambda_ex=488  # laser wavelength in nanometers
# excitation volume size
fcs.expsf_r0=0.23*sqrt(2) # 1/e^2 width of excitation volume
fcs.expsf_z0=6*fcs.expsf_r0 # 1/e^2 width of excitation volume
# excitation volume position (0,0,0 = in the center of the sim-box)
fcs.ex_x0=0
fcs.ex_y0=0
fcs.ex_z0=0

# detection volume size
fcs.detpsf_r0=fcs.expsf_r0
fcs.detpsf_z0=fcs.expsf_z0
# position of detection volume
fcs.img_x0=0
fcs.img_y0=0
fcs.img_z0=0
# detection efficiency
fcs.q_det=1
# save binned count-rate (false = no) with given resolution ... a low-res version for the FCS-output files is generated anyways!
fcs.save_binning=false
fcs.save_binning_time=1e-5


##################################################################
# create a brownian-motion trajectory-source object "brownian1"
##################################################################
# Note: all non-mentioned properties either default, or from supergroup "brownian"
# diffusion coefficinet in micrometer^2/second
brownian1.diff_coeff=100


##################################################################
# create an FCS trajectory-sinc object "fcs1"
##################################################################
# Note: all non-mentioned properties either default, or from supergroup "brownian"
# sources are the sources of trajectories that are detected by fcs1 ... comma-separated list
fcs1.sources=brownian1
# a custom name for this object. This name is also used as part of the output file names!
fcs1.object_name="cA"+floattostr(brownian1.c_fluor)+"_D"+floattostr(brownian1.diff_coeff)+"_detection"
